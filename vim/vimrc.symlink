set t_Co=256
color peaksea
set background=dark

" language messages en
set encoding=utf-8
set guifont=Inconsolata\ 12

" base for vimrc file taken from http://biodegradablegeek.com/2007/12/using-vim-as-a-complete-ruby-on-rails-ide/
filetype on  " Automatically detect file types.
set nocompatible  " We don't want vi compatibility.
syntax enable

" Add recently accessed projects menu (project plugin)
set viminfo^=!

" Minibuffer Explorer Settings
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
let g:miniBufExplSplitBelow = 0

hi MBENormal guifg=#A0A0A0 guibg=bg

call pathogen#runtime_append_all_bundles()

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>

" Use ';' as ':'
map ; :
let mapleader = ","

" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'

"-------------------------
set cf  " Enable error files & error jumping.
set clipboard+=unnamed  " Yanks go on clipboard instead.
set history=256  " Number of things to remember in history.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off
set timeoutlen=1000  " Time to wait after ESC (default causes an annoying delay)
set hidden " Hide buffers when abandoned
" Change CWD to current buffer (unless file is in /tmp)
autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif
:au FileChangedShell * echo "Warning: File changed on disk"

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set visualbell           " don't beep
set noerrorbells         " don't beep
au CursorHold * checktime

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
set autoindent
set smarttab
set expandtab
" Visual
"
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
" set list
" Show $ at end of line and trailing space as ~
set lcs=tab:\ \ ,eol:$,trail:~,extends:>,precedes:<
" set novisualbell  " No blinking .
" set noerrorbells  " No noise.
set laststatus=2  " Always show status line.

" gvim specific
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes
"-------------------------
"winsize 180 40
set splitbelow
set go-=m
set go-=T

command! -nargs=1 -bang -complete=customlist,genutils#UserFileComplete2 FindInPath :find<bang> <args>

set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

filetype off
filetype plugin indent on

noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l
inoremap jj <ESC>

" Enter a blank line below/above cursor in Normal mode.
nmap ,o o<Esc>k
nmap ,O O<Esc>j

au Bufread,BufNewFile *.as set filetype=actionscript

let g:ackprg="ack-grep -H --nocolor --nogroup --column"

"ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold

map <leader>f :FufFileWithCurrentBufferDir <C-M> 
map <leader>b :FufBuffer<C-M>

set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <leader>r :NERDTreeFind<cr>


" Source support_function.vim to support snipmate-snippets.
if filereadable(expand("~/.vim/bundle/snipmate-snippets/snippets/support_functions.vim"))
  source ~/.vim/bundle/snipmate-snippets/snippets/support_functions.vim
endif
