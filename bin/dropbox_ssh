#!/bin/bash
set -eo pipefail

DROPBOX_FOLDER="$HOME/Dropbox"
ENCRYPTED_SSH_PATH="$DROPBOX_FOLDER/ssh.tar.gz.encrypted"

if ! [ -d "$HOME/Dropbox" ]; then
  echo "Could not find Dropbox folder at $HOME/Dropbox. Please set up Dropbox first."
  exit 1
fi

if ! which openssl > /dev/null 2>&1; then
  echo "openssl is required! Please install packages first."
  exit 1
fi

function usage() {
  cat <<HELP >&2
Usage: $0
  -s Encrypt and save ~/.ssh to Dropbox
  -r Decrypt and restore ~/.ssh from Dropbox ($ENCRYPTED_SSH_PATH)
HELP
}

function save_ssh() {
  echo "=> Encrypting $HOME/.ssh and saving to ${ENCRYPTED_SSH_PATH}..."
  cd "$HOME/.ssh"
  tar cz * | openssl enc -aes-256-cbc -e > "${ENCRYPTED_SSH_PATH}"
}

function restore_ssh() {
  if ! [ -f "$ENCRYPTED_SSH_PATH" ]; then
    echo "Could not find encrypted SSH keys at ${ENCRYPTED_SSH_PATH}"
    exit 1
  fi

  echo "=> Decrypting and extracting ~/.ssh from ${ENCRYPTED_SSH_PATH}..."
  openssl aes-256-cbc -d -in "${ENCRYPTED_SSH_PATH}" -out /tmp/ssh.tar.gz
  rm -rf "$HOME/.ssh"
  mkdir -p "$HOME/.ssh"
  cd "$HOME/.ssh"
  tar xvf /tmp/ssh.tar.gz
  rm -rf /tmp/ssh.tar.gz
}

if [ -z "$1" ]; then
  usage
  exit 1
fi

function parse_options() {
  local OPTIND=1
  local opt
  while getopts "srh" opt; do
    case "$opt" in
    s)
      save_ssh;;
    r)
      restore_ssh;;
    h)
      usage
      exit;;
    *)
      echo "Unknown option: -$opt" >&2
      return 1;;
    esac
  done
  shift $((OPTIND -1))
}
parse_options "$@"
