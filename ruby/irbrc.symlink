# https://gist.github.com/1454728
require 'irb/ext/save-history'
#History configuration
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-history"

require 'rubygems'

@irb_extensions = []

def require_with_bundler_fallback(gem_name, load_file = nil)
  load_file ||= gem_name
  begin
    require load_file
  rescue LoadError => e
    gem_paths = []
    Gem.path.each do |sys_gem_path|
      Dir[sys_gem_path + '/gems/*'].each do |gem_path|
        gem_paths << gem_path if %r{#{gem_name}} =~ gem_path
      end
    end

    if gem_paths.empty?
      error = LoadError.new("It seems like #{gem_name} is not installed.")
      class << error; def skip_backtrace?; true; end; end
      raise error
    end

    $:.unshift File.join(gem_paths.sort_by(&:to_s).last, "lib")
    require load_file
  end

  yield if block_given?

  @irb_extensions << gem_name
rescue Exception => err
  msg = "Couldn't load #{gem_name}: #{err}"
  msg << "\n#{err.backtrace[0..10].join("\n")}" unless err.respond_to?(:skip_backtrace?) && err.skip_backtrace?
  warn msg
end

require_with_bundler_fallback 'awesome_print', 'ap' do
  AwesomePrint.irb!
end

# Quick benchmarking
# Based on rue's irbrc => http://pastie.org/179534
def qbm(repetitions=100, &block)
  require 'benchmark'

  Benchmark.bmbm do |b|
    b.report {repetitions.times &block}
  end
  nil
end

# Return only the methods not present on basic objects
class Object
  def uniq_methods
    (self.methods - Object.instance_methods).sort
  end
end
